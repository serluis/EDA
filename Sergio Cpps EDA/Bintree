/*
 * bintree_eda.h
 *
 * Implementaci�n del TAD arbol binario con nodos enlazados usando shared_ptr
 *
 *  Estructuras de Datos y Algoritmos
 *  Facultad de Inform�tica
 *  Universidad Complutense de Madrid
 *
 *  Copyright (c) 2017 Enrique Mart�n Mart�n. All rights reserved.
 */

#ifndef BINTREE_EDA_H_
#define BINTREE_EDA_H_

#include <stdexcept> // domain_error
#include <algorithm> // max
#include <memory>    // shared_ptr, make_shared
#include <iomanip>   // setw
#include <iostream>  // endl
#include <vector>	 // vectores
#include <queue>	 // cola
using namespace std;


template <typename T>
class bintree {
private:
	static const int TREE_INDENTATION = 4;

	/*
	 Nodo que almacena internamente el elemento (de tipo T)
	 y dos 'punteros compartidos', uno al hijo izquierdo y al hijo derecho.
	 */
	class Nodo; // Declaraci�n adelantada para poder definir Link
	using Link = shared_ptr<Nodo>; // Alias de tipo

	class Nodo {
	public:
		Link izq;
		T elem;
		Link der;

		Nodo(const T& elem) : izq(nullptr), elem(elem), der(nullptr) {}
		Nodo(Link izq, const T& elem, Link der) : izq(izq), elem(elem), der(der) {}
	};

	// puntero a la ra�z
	Link raiz;

	// constructora privada a partir de un puntero a Nodo
	// Para construir los �rboles generados por left() y right()
	bintree(Link r) : raiz(r) {} // O(1)

	// Muestra por 'out' una representaci�n del �rbol
	// Adaptado de "ADTs, DataStructures, and Problem Solving with C++", Larry Nyhoff, Person, 2015
	void graph_rec(ostream & out, int indent, Link raiz) const {
		// O(n), donde 'n' es el n�mero de nodos alcanzables desde 'raiz'
		if (raiz != nullptr) {
			graph_rec(out, indent + TREE_INDENTATION, raiz->der);
			out << setw(indent) << " " << raiz->elem << endl;
			graph_rec(out, indent + TREE_INDENTATION, raiz->izq);
		}
	}
	void preorder_rec(bintree<int> raiz,vector<int>& v) const {
		// raiz izq y derecho
		if (!raiz.empty()) {
			v.push_back(raiz.root());
			preorder_rec(raiz.left(), v);
			preorder_rec(raiz.right(), v);
		}		
	}
	void inorder_rec(bintree<int> raiz, vector<int>& v) const {
		// izq raiz derecho
		if (!raiz.empty()) {
			inorder_rec(raiz.left(), v);
			v.push_back(raiz.root());
			inorder_rec(raiz.right(), v);
		}
	}
	void postorder_rec(bintree<int> raiz, vector<int>& v) const {
		//izq derecho raiz
		if (!raiz.empty()) {
			postorder_rec(raiz.left(), v);
			postorder_rec(raiz.right(), v);
			v.push_back(raiz.root());
		}
	}
	void levels_rec(bintree<int> raiz, vector<int>& v,queue<bintree>& q) const {
		// niveles izq der
		if (!q.front().left().empty()) {
			q.push(q.front().left());
		}
		if (!q.front().right().empty()) {
			q.push(q.front().right());
		}
		v.push_back(q.front().root());
		q.pop();
		if (!q.empty()) {
			levels_rec(q.front(), v, q);
		}
	}
public:
	// constructor de �rbol vac�o
	bintree() : raiz(nullptr) {} // O(1)

	// constructor de �rbol hoja
	bintree(const T& elem) : raiz(make_shared<Nodo>(elem)) {} // O(1)

	// constructor de �rbol con 2 hijos
	bintree(const bintree<T>& izq, const T& elem, const bintree<T>& der) : // O(1)
		raiz(make_shared<Nodo>(izq.raiz, elem, der.raiz)) {}

	// valor en la ra�z (si existe)
	const T& root() const { // O(1)
		if (empty()) {
			throw std::domain_error("No hay raiz en arbol vacio");
		}
		else {
			return raiz->elem;
		}
	}

	// hijo izquierdo (si existe)
	bintree<T> left() const { // O(1)
		if (empty()) {
			throw std::domain_error("No hay hijos en arbol vacio");
		}
		else {
			return bintree(raiz->izq);
		}
	}

	// hijo derecho (si existe)
	bintree<T> right() const { // O(1)
		if (empty()) {
			throw std::domain_error("No hay hijos en arbol vacio");
		}
		else {
			return bintree(raiz->der);
		}
	}

	// saber si el �rbol es vac�o 
	bool empty() const { // O(1)
		return (raiz == nullptr);
	}

	// altura del �rbol
	size_t height() const { // O(n), donde 'n' es el n�mero de nodos en el �rbol
		if (empty()) {
			return 0;
		}
		else {
			size_t hl = left().height();
			size_t hr = right().height();
			return max<size_t>(hl, hr) + 1;
		}
	}

	

	// Muestra por 'out' una representaci�n del �rbol
	// Adaptado de "ADTs, DataStructures, and Problem Solving with C++", Larry Nyhoff, Person, 2015
	void graph(ostream & out) const { // O(n), donde 'n' es el n�mero de nodos en el �rbol
		out << "==== Tree =====" << endl;
		graph_rec(out, 0, raiz);
		out << "===============" << endl;
	}

	// Estos metodos muestran por consola un vector con el recorrido en distinto orden y por niveles
	// Todos ellos con coste O(n) donde n=num de elems del arbol
	vector<T> preorder()const {
		// raiz izq y derecho
		vector<int> v;
		preorder_rec(raiz, v);
		return v;
	}
	vector<T> inorder()const{
		// izq raiz derecho
		vector<int> v;
		inorder_rec(raiz, v);
		return v;
	}
	vector<T> postorder() {
		//izq derecho raiz
		vector<int> v;
		postorder_rec(raiz, v);
		return v;
	}
	vector<T> levels() const {
		// altura y despues izq y derecho
		vector<int> v;
		queue<bintree> q;
		/*v.push_back(raiz.root());*/
		q.push(raiz);
		levels_rec(raiz, v, q);
		return v;
	}

};

#endif /* BINTREE_EDA_H_ */

bintree <int> creaArbol_rec() {
	int rr;
	cin >> rr;
	if (rr == 0) {

		return bintree <int> ();
	}
	else {

		bintree <int> izq = creaArbol_rec();
		bintree <int> der = creaArbol_rec();

		bintree <int> arbol(izq, rr, der);

		return arbol;
	}
}
void escribeVec(vector<int> v) {
	for (int i = 0; i < v.size(); i++) {
		if (i == (v.size() - 1)) {
			cout << v[i];
		}
		else {
			cout << v[i] << +" ";
		}
	}
	cout << "\n";
}
void creaArbol() {
	
	bintree <int> arbol = creaArbol_rec();
	if (arbol.empty()) {
		for (int a = 0; a < 4; a++) {
			cout << "\n";
		}
		cout << "==\n";
	}
	else {
		//arbol.graph(cout);
		vector<int> pre = arbol.preorder();
		escribeVec(pre);
		vector<int> ino = arbol.inorder();
		escribeVec(ino);
		vector<int> pos = arbol.postorder();
		escribeVec(pos);
		vector<int> lev = arbol.levels();
		escribeVec(lev);
		cout << "==\n";
	}
	
}
int main() {
	int casos;
	cin >> casos;
	for (int a = 0; a < casos; a++) {
		creaArbol();
	}
	system("pause");
	return 0;
}

// Entrada
// 2 casos
// 5 0 0
// 3 8 0 1 0 0 5 0 0

// Salida
// 5
// 5
// 5
// 5
// ==
// 3 8 1 5 Preorden
// 8 1 3 5 Inorden
// 1 8 5 3 Postorden
// 3 8 5 1 Por Niveles
// ==
